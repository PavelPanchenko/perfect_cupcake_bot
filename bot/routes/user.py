import asyncio
import logging
import random

from aiogram import Router, types
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import InputMediaPhoto, InputMediaVideo
from aiogram.utils.payload import decode_payload

from ..config import settings
from ..database import get_all_recipes, get_one_user, add_user

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

user_router = Router()

MESSAGE_COMMAND = (
    # "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç!\n"
    # "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∫—É—Å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
    # "–ö–æ–º–∞–Ω–¥—ã:\n"
    # "/recipe - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
    # "/all_recipes - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
    # "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
    "–©–æ –º–æ–∂–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:\n"
    "/recipe - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç\n"
    "/all_recipes - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏\n"
)

MESSAGE_WELCOME_BIG = (
    "–ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∑—ñ! üë©‚Äçüç≥üë®‚Äçüç≥\n\n"
    "–†–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å –Ω–∞ –º–æ—î–º—É –∫—É—Ä—Å—ñ ‚Äú–°–µ–∫—Ä–µ—Ç —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–µ–∫—Å—É‚Äù.\n\n"
    "–ù–∞ —Ü—å–æ–º—É –∫—É—Ä—Å—ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:\n"
    "‚úÖ –î–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–∫—Ä–æ–∫–æ–≤—ñ —Ä–µ—Ü–µ–ø—Ç–∏, —è–∫—ñ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–µ–∫—Å–∏ –≤–∞—à–æ—ó –º—Ä—ñ—ó.\n"
    "‚úÖ –¶—ñ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏, —è–∫ —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ —É –≤–∏–ø—ñ—á—Ü—ñ.\n"
    "‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ —Ç–µ—Ö–Ω—ñ–∫–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö, —Å–º–∞—á–Ω–∏—Ö –∫–µ–∫—Å—ñ–≤.\n"
    "‚úÖ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É —á–µ—Ä–µ–∑ –º–æ—é Instagram-—Å—Ç–æ—Ä—ñ–Ω–∫—É @svitlychnyi_chef ‚Äì —è –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
    "–ú—ñ–π –∫—É—Ä—Å —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ç–∞–∫, —â–æ–± –Ω–∞–≤—ñ—Ç—å –Ω–æ–≤–∞—á–∫–∏ –ª–µ–≥–∫–æ –º–æ–≥–ª–∏ –ø–æ—á–∞—Ç–∏. –£—Å–µ –ø—Ä–æ—Å—Ç–æ, –∑—Ä–æ–∑—É–º—ñ–ª–æ —ñ –∑ –ª—é–±–æ–≤‚Äô—é –¥–æ –∫—É–ª—ñ–Ω–∞—Ä—ñ—ó!\n\n"
    "üåü –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –ø—Ä–æ–±—É–π—Ç–µ, –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ ‚Äì —ñ –≤–∞—à—ñ –∫–µ–∫—Å–∏ —Å—Ç–∞–Ω—É—Ç—å –∑—ñ—Ä–∫–∞–º–∏ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–æ–ª—É!\n\n"
    "–ë–∞–∂–∞—é –≤–∞–º –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —ñ —Å–º–∞—á–Ω–æ—ó –≤–∏–ø—ñ—á–∫–∏!"
)


# @user_router.message()
# async def get_file_id(message: types.Message):
#     if message.document:
#         await message.answer(message.document.file_id)
#     elif message.photo:
#         await message.answer(message.photo[-1].file_id)
#     elif message.video:
#         await message.answer(message.video.file_id)


@user_router.message(CommandStart(deep_link=True))
async def cmd_start_with_deep_link(message: types.Message, command: CommandObject):
    user_id = message.from_user.id

    await add_user(user_id)

    verify_deep_link = command.args
    payload = decode_payload(verify_deep_link)

    if not payload:
        return
    if payload != settings.VALID_CODE:
        return

    await message.answer(MESSAGE_WELCOME_BIG)
    await asyncio.sleep(0.5)
    for note in settings.WELCOME_VIDEO_NOTES:
        await message.answer_video_note(note, protect_content=True)
        await asyncio.sleep(2)
    await message.answer(
        MESSAGE_COMMAND,
    )


@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    user = await get_one_user(user_id)
    if not user:
        return
    await message.answer(MESSAGE_COMMAND)


@user_router.message(Command("all_recipes"))
async def cmd_all_recipes(message: types.Message):
    recipes = await get_all_recipes()
    if not recipes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    for recipe in recipes:
        if recipe.video:
            media = [
                InputMediaPhoto(
                    media=recipe.image,
                    caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                    caption_entities=message.entities,
                    # show_caption_above_media=True,
                ),
                InputMediaVideo(
                    media=recipe.video,
                    # caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                    # caption_entities=message.entities,
                    # show_caption_above_media=True,
                ),
            ]
            await message.answer_media_group(media, protect_content=True)
        else:
            await message.answer_photo(
                photo=recipe.image,
                caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                caption_entities=message.entities,
                protect_content=True,
            )
        await asyncio.sleep(0.5)  # Prevent flood limits


@user_router.message(Command("recipe"))
async def cmd_random_recipe(message: types.Message):
    """Send a random recipe to the user"""
    recipes = await get_all_recipes()
    if not recipes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    recipe = random.choice(recipes)
    if recipe.video:
        media = [
            InputMediaPhoto(
                media=recipe.image,
                caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                # show_caption_above_media=True,
            ),
            InputMediaVideo(
                media=recipe.video,
                # caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                # show_caption_above_media=True,
            ),
        ]

        await message.answer_media_group(media, protect_content=True)
    else:
        await message.answer_photo(
            photo=recipe.image,
            caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
            protect_content=True,
        )
