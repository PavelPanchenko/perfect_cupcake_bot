import asyncio
import logging
import random

from aiogram import Router, types
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import InputMediaPhoto, InputMediaVideo
from aiogram.utils.payload import decode_payload

from ..config import settings
from ..database import get_all_recipes, get_one_user, add_user

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

user_router = Router()

MESSAGE_WELCOME = (
    # "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç!\n"
    # "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∫—É—Å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
    # "–ö–æ–º–∞–Ω–¥—ã:\n"
    # "/recipe - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
    # "/all_recipes - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
    # "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
    "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∫—É–ª—ñ–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç—É!\n"
    "–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±–µ–∑–ª—ñ—á —Å–º–∞—á–Ω–∏—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤.\n\n"
    "–ö–æ–º–∞–Ω–¥–∏:\n"
    "/recipe - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç\n"
    "/all_recipes - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏\n"
    "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"
)


@user_router.message(CommandStart(deep_link=True))
async def cmd_start_with_deep_link(message: types.Message, command: CommandObject):
    user_id = message.from_user.id

    await add_user(user_id)

    verify_deep_link = command.args
    payload = decode_payload(verify_deep_link)

    if not payload:
        return
    if payload != settings.VALID_CODE:
        return
    for note in settings.WELCOME_VIDEO_NOTES:
        await message.answer_video_note(note, protect_content=True)
        await asyncio.sleep(2)
    await message.answer(
        MESSAGE_WELCOME,
    )


@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    user = await get_one_user(user_id)
    if not user:
        return
    await message.answer(MESSAGE_WELCOME)


@user_router.message(Command("all_recipes"))
async def cmd_all_recipes(message: types.Message):
    recipes = await get_all_recipes()
    if not recipes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    for recipe in recipes:
        if recipe.video:
            media = [
                InputMediaPhoto(
                    media=recipe.image,
                    caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                    caption_entities=message.entities,
                ),
                InputMediaVideo(
                    media=recipe.video,
                    caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                    caption_entities=message.entities,
                ),
            ]
            await message.answer_media_group(media, protect_content=True)
        else:
            await message.answer_photo(
                photo=recipe.image,
                caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
                caption_entities=message.entities,
                protect_content=True,
            )
        await asyncio.sleep(0.5)  # Prevent flood limits


@user_router.message(Command("recipe"))
async def cmd_random_recipe(message: types.Message):
    """Send a random recipe to the user"""
    recipes = await get_all_recipes()
    if not recipes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    recipe = random.choice(recipes)
    if recipe.video:
        media = [
            InputMediaPhoto(
                media=recipe.image, caption=f"üç≥ {recipe.title}\n\n{recipe.text}"
            ),
            InputMediaVideo(
                media=recipe.video, caption=f"üç≥ {recipe.title}\n\n{recipe.text}"
            ),
        ]

        await message.answer_media_group(media, protect_content=True)
    else:
        await message.answer_photo(
            photo=recipe.image,
            caption=f"üç≥ {recipe.title}\n\n{recipe.text}",
            protect_content=True,
        )
